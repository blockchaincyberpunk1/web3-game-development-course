Automated Security Testing

Objective: The objective of this assignment is to teach students how to use automated security testing tools for Web3 games. Students will become familiar with tools such as MythX, Securify, or Slither and learn how to analyze a Web3 game's smart contracts using these tools. They will interpret the tool's results, identify potential security risks, and suggest code changes or mitigations to address the identified issues.

Instructions:

Introduction to Automated Security Testing:

Provide an introduction to the importance of automated security testing in Web3 game development.
Explain the role of automated security testing tools in identifying vulnerabilities and potential risks in smart contracts.
Introduction to Security Testing Tools:

Introduce students to popular automated security testing tools used in Ethereum smart contract development. Mention tools like MythX, Securify, and Slither.
Provide resources or tutorials for students to learn how to use one of these tools effectively.
Selecting a Web3 Game:

Instruct students to choose a Web3 game project (smart contract) for security testing. The game should contain smart contracts that they can analyze.
Conducting Automated Security Testing:

Task students with using one of the selected security testing tools to analyze the smart contracts of their chosen game.
Instruct them to perform the security analysis according to the tool's documentation and guidelines.
Interpreting Tool Results:

Require students to interpret the results generated by the security testing tool.
Instruct them to identify and document potential security vulnerabilities or risks detected by the tool.
Suggesting Code Changes and Mitigations:

Task students with suggesting code changes or mitigations to address the identified security issues.
Encourage them to provide detailed explanations for each suggested change and why it improves security.
Documentation and Reporting:

Require students to document the entire security testing process, including tool usage, results interpretation, and code change suggestions.
Instruct them to create a comprehensive report summarizing their findings and recommendations.
Presentation and Discussion:

Organize a presentation session where students can share their findings, tool usage experiences, and recommendations.
Encourage discussion and peer feedback on the security analysis reports.
Assessment Criteria:

Evaluate students based on the following criteria:
The correct and effective usage of the selected security testing tool.
The accuracy and completeness of vulnerability identification.
The quality and clarity of code change suggestions and mitigations.
The quality of the security analysis report and documentation.